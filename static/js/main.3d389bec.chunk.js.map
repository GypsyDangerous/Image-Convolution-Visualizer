{"version":3,"sources":["components/ImageDisplay.js","components/Convolution.js","App.js","index.js"],"names":["index","x","y","width","floor","Math","convolve","img","filter","scl","r","b","g","dim2","dim","i","j","filterIndex","filterValue","values","pixelIndex","data","ImageDisplay","props","displayRef","useRef","useState","image","setImage","useEffect","ctx","current","getContext","drawImage","imgPixels","getImageData","putImageData","newImage","ImageData","height","scale","className","ref","id","type","name","onChange","e","target","files","length","file","fileReader","FileReader","onload","Image","src","result","readAsDataURL","accept","Convolution","Array","fill","setFilter","setScale","onInput","style","gridTemplateColumns","map","n","value","key","temp","Number","changeHandler","htmlFor","min","App","inputHandler","useCallback","f","s","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d389bec.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react'\r\n\r\nimport \"./ImageDisplay.css\"\r\n\r\nconst index = (x, y, width) => (x+y*width)*4\r\n\r\nconst floor = Math.floor\r\n\r\nconst convolve = (img, filter, scl, x, y) => {\r\n    let r = 0, b = 0, g = 0\r\n    const dim2 = floor(filter.dim / 2)\r\n    for (let i = -dim2; i <= dim2; i++){\r\n        for (let j = -dim2; j <= dim2; j++){\r\n            const filterIndex = floor(index(i+dim2, j+dim2, filter.dim)/4)\r\n            const filterValue = filter.values[filterIndex]/scl\r\n            const pixelIndex = index(x+i, y+j, 500)\r\n            r += img.data[pixelIndex] * filterValue\r\n            g += img.data[pixelIndex + 1] * filterValue\r\n            b += img.data[pixelIndex + 2] * filterValue\r\n        }\r\n    }\r\n    return [r, g, b]\r\n}\r\n\r\nconst ImageDisplay = props => {\r\n    const displayRef = useRef()\r\n    const [image, setImage] = useState()\r\n\r\n    const pickHandler = e => {\r\n        if (e.target.files && e.target.files.length === 1) {\r\n            const file = e.target.files[0];\r\n            const fileReader = new FileReader()\r\n            fileReader.onload = () => {\r\n                const img = new Image()\r\n                img.src = fileReader.result\r\n                setImage(img)\r\n            }\r\n            fileReader.readAsDataURL(file)\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(image && props.filter){\r\n            const ctx = displayRef.current.getContext(\"2d\")\r\n\r\n            ctx.drawImage(image, 0, 0, 500, 500)\r\n            let imgPixels = ctx.getImageData(0, 0, 500, 500);\r\n\r\n            const height = 500, width = 500\r\n            // imgPixels = greyScale(imgPixels, width, height)\r\n            ctx.putImageData(imgPixels, 0, 0);\r\n            const newImage = new ImageData(width, height)\r\n            for(let i = 1; i < width-1; i++){\r\n                for(let j = 1; j < height-1; j++){\r\n                    const [r, g, b] = convolve(imgPixels, props.filter, props.scale, i, j)\r\n                    const pixelIndex = index(i, j, width)\r\n                    newImage.data[pixelIndex] = r\r\n                    newImage.data[pixelIndex+1] = g\r\n                    newImage.data[pixelIndex+2] = b\r\n                    newImage.data[pixelIndex+3] = 255\r\n                }\r\n            }\r\n            ctx.putImageData(newImage, 500, 0)\r\n\r\n            // var tmpLink = document.createElement('a'); \r\n            // tmpLink.download = 'image.png'; \r\n            // // set the name of the download file \r\n            // tmpLink.href = newImage;    \r\n            // // temporarily add link to body and initiate the download  \r\n            // document.body.appendChild( tmpLink );  \r\n            // tmpLink.click();  \r\n            // document.body.removeChild( tmpLink );\r\n\r\n        }\r\n\r\n    }, [props.filter, props.scale, image])\r\n\r\n    useEffect(() => {\r\n        if(image){\r\n            const ctx = displayRef.current.getContext(\"2d\")\r\n            ctx.drawImage(image, 0, 0, 500, 500)\r\n            let imgPixels = ctx.getImageData(0, 0, 500, 500);\r\n            // ctx.putImageData(imgData, 10, 70);\r\n            const height=500, width=500\r\n            // imgPixels = greyScale(imgPixels, width, height)\r\n            \r\n            ctx.putImageData(imgPixels, 0, 0);\r\n        }   \r\n    }, [image])\r\n\r\n    return (\r\n        <div className=\"image-display\">\r\n            <canvas ref={displayRef} height=\"500\" width=\"1000\" id=\"display\"></canvas>\r\n            <input type=\"file\" id=\"img\" name=\"img\" onChange={pickHandler} accept=\"image/png, image/jpeg\"/>\r\n            {/* <img src={image} alt=\"\" className/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageDisplay","import React, { useState, useEffect } from 'react'\r\n\r\nimport \"./Convolution.css\"\r\n\r\nconst Convolution = props => {\r\n    const [dim, setDim] = useState(3)\r\n    const [filter, setFilter] = useState({values: Array(dim*dim).fill(1), dim: dim})\r\n    const [scale, setScale] = useState(1)\r\n\r\n    useEffect(() => {\r\n        props.onInput(filter, scale)\r\n    }, [filter.dim])\r\n    \r\n    const changeHandler = (e, i) => {\r\n        const temp = {...filter}\r\n        temp.values[i] = Number(e.target.value)\r\n        setFilter(temp)\r\n        props.onInput(temp, scale)\r\n    }\r\n\r\n    const scaleChangeHandler = e => {\r\n        setScale(Number(e.target.value))\r\n        props.onInput(filter, Number(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <div className=\"convolution\">\r\n            <div className=\"convolution-container\" style={{gridTemplateColumns: `repeat(${filter.dim}, 1fr)`}}>\r\n            {filter.values.map((n,i) => (\r\n                <input className=\"filter-number\" value={n} key={i} onChange={e => changeHandler(e, i)} type=\"number\"/>\r\n            ))}\r\n            </div>\r\n            <div className=\"filter-scale\">\r\n            <label htmlFor=\"scale\">Scale</label>\r\n            <input name=\"scale\" min=\"0\" value={scale} onChange={scaleChangeHandler} type=\"number\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Convolution","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport ImageDisplay from './components/ImageDisplay';\nimport Convolution from './components/Convolution';\n\nfunction App() {\n  \n  const [filter, setFilter] = useState()\n  const [scale, setScale] = useState()\n\n  const inputHandler = useCallback((f, s) => {\n    setFilter(f)\n    setScale(s)\n  }, [])\n\n  return (\n    <div className=\"App\">\n     <ImageDisplay filter={filter} scale={scale}/>\n     <Convolution onInput={inputHandler}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}