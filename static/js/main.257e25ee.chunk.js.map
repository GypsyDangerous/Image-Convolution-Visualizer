{"version":3,"sources":["components/ImageDisplay.js","components/Convolution.js","App.js","index.js"],"names":["index","x","y","width","floor","Math","convolve","img","filter","scl","r","b","g","dim2","dim","i","j","filterIndex","filterValue","values","pixelIndex","data","ImageDisplay","props","displayRef","useRef","convoledRef","fileRef","downloadRef","useState","image","setImage","useEffect","ctx","current","getContext","otherCtx","drawImage","imgPixels","getImageData","putImageData","newImage","ImageData","height","scale","className","ref","id","type","name","onChange","e","target","files","length","file","fileReader","FileReader","onload","Image","src","result","readAsDataURL","accept","onClick","click","toDataURL","href","download","style","display","Convolution","Array","fill","setFilter","setScale","onInput","gridTemplateColumns","map","n","value","key","temp","Number","changeHandler","htmlFor","min","App","setDim","inputHandler","useCallback","f","s","max","sign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.257e25ee.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react'\r\n\r\nimport \"./ImageDisplay.css\"\r\n\r\nconst index = (x, y, width) => (x+y*width)*4\r\n\r\nconst floor = Math.floor\r\n\r\nconst convolve = (img, filter, scl, x, y) => {\r\n    let r = 0, b = 0, g = 0\r\n    const dim2 = floor(filter.dim / 2)\r\n    for (let i = -dim2; i <= dim2; i++){\r\n        for (let j = -dim2; j <= dim2; j++){\r\n            const filterIndex = floor(index(i+dim2, j+dim2, filter.dim)/4)\r\n            const filterValue = filter.values[filterIndex]/scl\r\n            const pixelIndex = index(x+i, y+j, 500)\r\n            r += img.data[pixelIndex] * filterValue\r\n            g += img.data[pixelIndex + 1] * filterValue\r\n            b += img.data[pixelIndex + 2] * filterValue\r\n        }\r\n    }\r\n    return [r, g, b]\r\n}\r\n\r\nconst ImageDisplay = props => {\r\n    const displayRef = useRef()\r\n    const convoledRef = useRef()\r\n    const fileRef = useRef()\r\n    const downloadRef = useRef()\r\n    const [image, setImage] = useState()\r\n\r\n    const pickHandler = e => {\r\n        if (e.target.files && e.target.files.length === 1) {\r\n            const file = e.target.files[0];\r\n            const fileReader = new FileReader()\r\n            fileReader.onload = () => {\r\n                const img = new Image()\r\n                img.src = fileReader.result\r\n                setImage(img)\r\n            }\r\n            fileReader.readAsDataURL(file)\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(image && props.filter){\r\n            const ctx = displayRef.current.getContext(\"2d\")\r\n            const otherCtx = convoledRef.current.getContext(\"2d\")\r\n            ctx.drawImage(image, 0, 0, 500, 500)\r\n            let imgPixels = ctx.getImageData(0, 0, 500, 500);\r\n            const height = 500, width = 500\r\n            ctx.putImageData(imgPixels, 0, 0);\r\n            const newImage = new ImageData(width, height)\r\n            for(let i = 1; i < width-1; i++){\r\n                for(let j = 1; j < height-1; j++){\r\n                    const [r, g, b] = convolve(imgPixels, props.filter, props.scale, i, j)\r\n                    const pixelIndex = index(i, j, width)\r\n                    newImage.data[pixelIndex] = r\r\n                    newImage.data[pixelIndex+1] = g\r\n                    newImage.data[pixelIndex+2] = b\r\n                    newImage.data[pixelIndex+3] = 255\r\n                }\r\n            }\r\n            otherCtx.putImageData(newImage, 0, 0)\r\n        }\r\n\r\n    }, [props.filter, props.scale, image])\r\n\r\n    const fileClickHandler = () => {\r\n        fileRef.current.click()\r\n    }\r\n\r\n    const downloadHandler = e => {\r\n        const ctx = convoledRef.current\r\n        const img = ctx.toDataURL(\"image/png\")\r\n        downloadRef.current.href = img\r\n        downloadRef.current.click()\r\n    }\r\n\r\n    return (\r\n        <div className=\"image-display\">\r\n            <canvas ref={displayRef} height=\"500\" width=\"500\" id=\"display\"></canvas>\r\n            <canvas ref={convoledRef} height=\"500\" width=\"500\" id=\"convolved-display\"></canvas>\r\n            <input ref={fileRef} type=\"file\" id=\"img\" name=\"img\" onChange={pickHandler} accept=\"image/png, image/jpeg\"/>\r\n            <button className=\"image-button\" onClick={fileClickHandler}>Choose Image</button>\r\n            <button className=\"image-button\" onClick={downloadHandler}>Download Convolved Image</button>\r\n            <a ref={downloadRef} id=\"download\" download=\"convolved.png\" href=\"\"  style={{display: \"none\"}}></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageDisplay","import React, { useState, useEffect } from 'react'\r\n\r\nimport \"./Convolution.css\"\r\n\r\nconst Convolution = props => {\r\n    const dim = props.dim\r\n    const [filter, setFilter] = useState({values: Array(dim*dim).fill(1), dim: dim})\r\n    const [scale, setScale] = useState(1)\r\n\r\n    useEffect(() => {\r\n        props.onInput(filter, scale)\r\n    }, [filter.dim])\r\n\r\n    useEffect(() => {\r\n        const dim = props.dim\r\n        setFilter({ values: Array(dim * dim).fill(1), dim: dim })\r\n    }, [props.dim])\r\n    \r\n    const changeHandler = (e, i) => {\r\n        const temp = {...filter}\r\n        temp.values[i] = Number(e.target.value)\r\n        setFilter(temp)\r\n        props.onInput(temp, scale)\r\n    }\r\n\r\n    const scaleChangeHandler = e => {\r\n        setScale(Number(e.target.value))\r\n        props.onInput(filter, Number(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <div className=\"convolution\">\r\n            <div className=\"convolution-container\" style={{gridTemplateColumns: `repeat(${filter.dim}, 1fr)`}}>\r\n            {filter.values.map((n,i) => (\r\n                <input className=\"filter-number\" value={n} key={i} onChange={e => changeHandler(e, i)} type=\"number\"/>\r\n            ))}\r\n            </div>\r\n            <div className=\"filter-scale\">\r\n            <label htmlFor=\"scale\">Scale</label>\r\n            <input name=\"scale\" min=\"0\" value={scale} onChange={scaleChangeHandler} type=\"number\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Convolution","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport ImageDisplay from './components/ImageDisplay';\nimport Convolution from './components/Convolution';\n\nfunction App() {\n  const [dim, setDim] = useState(3)\n  const [filter, setFilter] = useState()\n  const [scale, setScale] = useState()\n\n  const inputHandler = useCallback((f, s) => {\n    setFilter(f)\n    setScale(s)\n  }, [])\n\n  const changeHandler = e => {\n    const n = Number(e.target.value)\n    if(n %2 == 0){\n      setDim(n+Math.sign(n-dim))\n    }else{\n      setDim(n)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"dimension\"><h1>Image Convolver</h1></div>\n     <ImageDisplay filter={filter} scale={scale}/>\n     <Convolution dim={dim} onInput={inputHandler}/>\n      <div className=\"dimension\">\n        <label htmlFor=\"dimension\">Filter Size</label>\n        <input min=\"3\" max=\"7\" onChange={changeHandler} value={dim} type=\"number\" id=\"dimension\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}