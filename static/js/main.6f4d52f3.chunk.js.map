{"version":3,"sources":["components/ImageDisplay.js","components/Convolution.js","App.js","index.js"],"names":["index","x","y","width","floor","Math","convolve","img","filter","scl","r","b","g","dim2","dim","i","j","filterIndex","filterValue","values","pixelIndex","data","ImageDisplay","props","displayRef","useRef","convoledRef","fileRef","downloadRef","useState","image","setImage","useEffect","ctx","current","getContext","otherCtx","drawImage","imgPixels","getImageData","putImageData","newImage","ImageData","height","scale","className","id","ref","type","name","onChange","e","target","files","length","file","fileReader","FileReader","onload","Image","src","result","readAsDataURL","accept","onClick","click","toDataURL","href","download","Convolution","Array","fill","setFilter","setScale","selectRef","onInput","changeHandler","temp","Number","value","style","gridTemplateColumns","map","n","key","htmlFor","min","max","presetFilter","App","inputHandler","useCallback","f","s","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f4d52f3.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react'\r\n\r\nimport \"./ImageDisplay.css\"\r\n\r\nconst index = (x, y, width) => (x+y*width)*4\r\n\r\nconst floor = Math.floor\r\n\r\nconst convolve = (img, filter, scl, x, y) => {\r\n    let r = 0, b = 0, g = 0\r\n    const dim2 = floor(filter.dim / 2)\r\n    for (let i = -dim2; i <= dim2; i++){\r\n        for (let j = -dim2; j <= dim2; j++){\r\n            const filterIndex = floor(index(i+dim2, j+dim2, filter.dim)/4)\r\n            const filterValue = filter.values[filterIndex]/scl\r\n            const pixelIndex = index(x+i, y+j, 500)\r\n            r += img.data[pixelIndex] * filterValue\r\n            g += img.data[pixelIndex + 1] * filterValue\r\n            b += img.data[pixelIndex + 2] * filterValue\r\n        }\r\n    }\r\n    return [r, g, b]\r\n}\r\n\r\nconst ImageDisplay = props => {\r\n    const displayRef = useRef()\r\n    const convoledRef = useRef()\r\n    const fileRef = useRef()\r\n    const downloadRef = useRef()\r\n    const [image, setImage] = useState()\r\n\r\n    const pickHandler = e => {\r\n        if (e.target.files && e.target.files.length === 1) {\r\n            const file = e.target.files[0];\r\n            const fileReader = new FileReader()\r\n            fileReader.onload = () => {\r\n                const img = new Image()\r\n                img.src = fileReader.result\r\n                setImage(img)\r\n            }\r\n            fileReader.readAsDataURL(file)\r\n        } \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(image && props.filter){\r\n            const ctx = displayRef.current.getContext(\"2d\")\r\n            const otherCtx = convoledRef.current.getContext(\"2d\")\r\n            ctx.drawImage(image, 0, 0, 500, 500)\r\n            let imgPixels = ctx.getImageData(0, 0, 500, 500);\r\n            const height = 500, width = 500\r\n            ctx.putImageData(imgPixels, 0, 0);\r\n            const newImage = new ImageData(width, height)\r\n            for(let i = 1; i < width-1; i++){\r\n                for(let j = 1; j < height-1; j++){\r\n                    const [r, g, b] = convolve(imgPixels, props.filter, props.scale, i, j)\r\n                    const pixelIndex = index(i, j, width)\r\n                    newImage.data[pixelIndex] = r\r\n                    newImage.data[pixelIndex+1] = g\r\n                    newImage.data[pixelIndex+2] = b\r\n                    newImage.data[pixelIndex+3] = 255\r\n                }\r\n            }\r\n            otherCtx.putImageData(newImage, 0, 0)\r\n        }\r\n\r\n    }, [props.filter, props.scale, image])\r\n\r\n    const fileClickHandler = () => {\r\n        fileRef.current.click()\r\n    }\r\n\r\n    const downloadHandler = e => {\r\n        const ctx = convoledRef.current\r\n        const img = ctx.toDataURL(\"image/png\")\r\n        downloadRef.current.href = img\r\n    }\r\n\r\n    return (\r\n        <div className=\"image-display\">\r\n            <h2 id=\"original\">Original</h2>\r\n            <h2 id=\"convolved\">Convolved</h2>\r\n            <canvas ref={displayRef} height=\"500\" width=\"500\" id=\"display\"></canvas>\r\n            <canvas ref={convoledRef} height=\"500\" width=\"500\" id=\"convolved-display\"></canvas>\r\n            <input id=\"image-input\" ref={fileRef} type=\"file\" name=\"img\" onChange={pickHandler} accept=\"image/png, image/jpeg\"/>\r\n            <button id=\"image-button\" className=\"image-button\" onClick={fileClickHandler}>Choose Image</button>\r\n            <a id=\"download-button\" ref={downloadRef} onClick={downloadHandler} className=\"image-button\" download=\"convolved.png\" href=\"f\">Download Convolved Image</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageDisplay","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport \"./Convolution.css\"\r\n\r\nconst Convolution = props => {\r\n    const dim = props.dim\r\n    const [filter, setFilter] = useState({values: Array(dim*dim).fill(1), dim: dim})\r\n    const [scale, setScale] = useState(1)\r\n    const selectRef = useRef()\r\n\r\n    useEffect(() => {\r\n        props.onInput(filter, scale)\r\n    }, [filter.dim])\r\n\r\n    useEffect(() => {\r\n        setFilter(props.filter)\r\n        setScale(props.scale)\r\n\r\n    }, [props.filter, props.scale])\r\n\r\n    useEffect(() => {\r\n        const dim = props.dim\r\n        setFilter({ values: Array(dim * dim).fill(1), dim: dim })\r\n    }, [props.dim])\r\n    \r\n    const changeHandler = (e, i) => {\r\n        const temp = {...filter}\r\n        temp.values[i] = Number(e.target.value)\r\n        setFilter(temp)\r\n        props.onInput(temp, scale)\r\n    }\r\n\r\n    const scaleChangeHandler = e => {\r\n        setScale(Number(e.target.value))\r\n        props.onInput(filter, Number(e.target.value))\r\n    }\r\n\r\n    const selectChangeHandler = () => {\r\n        let presetFilter\r\n        switch (selectRef.current.value) {\r\n            case \"3x3 horz edge\":\r\n                presetFilter = {\r\n                    values: [-5, -5, -5, 5, 5, 5, 0, 0, 0],\r\n                    dim: 3\r\n                }\r\n                setFilter(presetFilter)\r\n                setScale(1)\r\n                break;\r\n            case \"3x3 vert edge\":\r\n                presetFilter = {\r\n                    values: [-5, 5, 0, -5, 5, 0, -5, 5, 0],\r\n                    dim: 3\r\n                }\r\n                setFilter(presetFilter)\r\n                setScale(1)\r\n                break;\r\n            case \"3x3 gen edge\":\r\n                presetFilter = {\r\n                    values: [-2, -2, -2, -2, 16, -2, -2, -2, -2],\r\n                    dim: 3\r\n                }\r\n                setFilter(presetFilter)\r\n                setScale(1)\r\n                break;\r\n            case \"5x5 blur\":\r\n                presetFilter = {\r\n                    values: Array(25).fill(1),\r\n                    dim: 5\r\n                }\r\n                setFilter(presetFilter)\r\n                setScale(25)\r\n                break;\r\n            case \"5x5 gauss blur\":\r\n                presetFilter = {\r\n                    values: [1, 4, 6, 4, 1, 4, 16, 24, 16, 4, 6, 24, 36, 24, 6, 4, 16, 24, 16, 4, 1, 4, 6, 4, 1],\r\n                    dim: 5\r\n                }\r\n                setFilter(presetFilter)\r\n                setScale(256)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"convolution\">\r\n            <h2 className=\"dimension\" id=\"filter-title\">Filter</h2>\r\n            <div className=\"convolution-container\" style={{gridTemplateColumns: `repeat(${filter.dim}, 1fr)`, width: filter.dim*50, height: filter.dim*50}}>\r\n            {filter.values.map((n,i) => (\r\n                <input className=\"filter-number\" value={n} key={i} onChange={e => changeHandler(e, i)} type=\"number\"/>\r\n            ))}\r\n            </div>\r\n            <div className=\"setting filter-scale\">\r\n            <label htmlFor=\"scale\">Filter Scale</label>\r\n            <input className=\"nonfilter-number\" name=\"scale\" value={scale} onChange={scaleChangeHandler} type=\"number\"/>\r\n            </div>\r\n            <div className=\"setting size\">\r\n                <label htmlFor=\"dimension\">Filter Size </label>\r\n                <input className=\"nonfilter-number\" min=\"3\" max=\"7\" onChange={changeHandler} value={dim} type=\"number\" id=\"dimension\" />\r\n            </div>\r\n            <div className=\"setting dimension\">\r\n                <label htmlFor=\"presets\">Filter Presets</label>\r\n                <select ref={selectRef} onClick={selectChangeHandler} id=\"presets\">\r\n                    <option value=\"3x3 horz edge\">3x3 Horizontal Edge Detection</option>\r\n                    <option value=\"3x3 vert edge\">3x3 Vertical Edge Detection</option>\r\n                    <option value=\"3x3 gen edge\">3x3 General Edge Detection</option>\r\n                    <option value=\"5x5 blur\">5x5 blur</option>\r\n                    <option value=\"5x5 gauss blur\">5x5 Gaussian blur</option>\r\n                    {/* <option value=\"5x5\">5x5</option> */}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Convolution","import React, { useState, useCallback, useRef } from 'react';\nimport './App.css';\nimport ImageDisplay from './components/ImageDisplay';\nimport Convolution from './components/Convolution';\n\nfunction App() {\n  const [dim, setDim] = useState(3)\n  const [filter, setFilter] = useState()\n  const [scale, setScale] = useState()\n  \n\n  const inputHandler = useCallback((f, s) => {\n    setFilter(f)\n    setScale(s)\n  }, [])\n\n  const changeHandler = e => {\n    const n = Number(e.target.value)\n    if(n %2 === 0){\n      setDim(n+Math.sign(n-dim))\n    }else{\n      setDim(n)\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"dimension\"><h1 className=\"title\">Image Convolution Demonstration</h1></div>\n     <Convolution dim={dim} filter={filter} scale={scale} onInput={inputHandler}/>\n     <ImageDisplay filter={filter} scale={scale}/>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}